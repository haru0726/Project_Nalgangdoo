generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 계정과 캐릭터 N:M 관계가 필요하다

// 계정
model Account {
  accountId Int @id @default(autoincrement())
  userName String @unique // 아이디 겸 닉네임
  password String
  characters CharacterList[] // 중간 테이블로 N:M 관계 맺기
  userCash Int @default(5000) // 캐쉬
  winCount Int
  loseCount Int
  drowCount Int
  rankPoint Int @default(100) // 랭킹 포인트. 플레이어 간의 점수 차가 클 수록 증감되는 값이 크면 좋겠다.
  createAt DateTime @default(now())

  @@map("Account")
}

// 게임 상에 존재하는 모든 캐릭터
model Character {
  characterId Int @id @default(autoincrement())
  name String @unique // 캐릭터 이름, 중복 불가
  speed Int // 각종 스탯...
  goalDetermination Int
  shootPower Int
  defense Int
  stamina Int
  accountCharacters CharacterList[] // 중간 테이블로 N:M 관계 맺기
  // 의문점: 스탯을 JSON으로 관리하는 게 좋은지, 컬럼으로 관리하는 게 좋은지

  @@map("Character")
}

// 계정이 보유한 캐릭터
// Account : Character = N:M 관계 설정을 위한 중간 테이블
model CharacterList {
  characterListId Int @id @default(autoincrement())
  accountId Int // 연결된 계정
  characterId Int // 연결된 캐릭터
  quantity Int @default(1) // 캐릭터 수량
  isFormation Boolean @default(false) // 편성 여부

  accountRelation Account @relation(fields: [accountId], references: [accountId])
  characterRelation Character @relation(fields: [characterId], references: [characterId])
}